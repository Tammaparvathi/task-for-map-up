import numpy as np

def rotate_and_transform(matrix):
    n = len(matrix)
    
    # Step 1: Rotate the matrix by 90 degrees clockwise
    rotated_matrix = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]
    
    # Step 2: Create the final matrix by replacing each element
    final_matrix = []
    for i in range(n):
        row_sum = sum(rotated_matrix[i])
        final_row = []
        for j in range(n):
            col_sum = sum(rotated_matrix[k][j] for k in range(n))
            # Exclude the current element from both row and column sums
            new_value = row_sum + col_sum - 2 * rotated_matrix[i][j]
            final_row.append(new_value)
        final_matrix.append(final_row)
    
    return final_matrix

# Example usage
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

final_matrix = rotate_and_transform(matrix)
print(np.array(final_matrix))


#Output
#For the given example:
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
#The function will output:
[[22, 19, 16],
 [23, 20, 17],
 [24, 21, 18]]
